openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "역전출판사 API"
  description: "토큰이 필요한 api의 경우, 로그인 api에서 토큰을 발급받아 우측 Authorize 부분에 입력하시면 됩니다. (외부에서 로그인 한 것은 적용 안됩니다.)"
servers:
  - description: "역전출판사 API"
    url: https://k4b201.p.ssafy.io/
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: user
security:
  - ApiKeyAuth: []
paths:
  /api/images/upload:
    post:
      tags:
        - images
      summary: 파일 업로드(S3) API
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                imgFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: 파일 업로드 성공
          schema:
            type: object
            properties:
              imgUrl:
                type: string
  /api/accounts/signup:
    post:
      tags:
        - accounts
      summary: 회원가입 API
      description: birthday의 경우 "1990-01-01"과 같은 형식으로, question의 경우 인덱스 값을 설정해서 정수값으로 넣어주셔야 합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                birthday:
                  type: string
                nickname:
                  type: string
                introduce:
                  type: string
                img:
                  type: string
                question:
                  type: integer
                answer:
                  type: string
              required:
                - username
                - password
                - birthday
                - nickname
                - question
                - answer
      responses:
        "200":
          description: 회원가입 성공
          schema:
            type: object
            properties:
              result:
                type: string
              userId:
                type: integer
  /api/accounts/login:
    post:
      tags:
        - accounts
      summary: 로그인 API
      description: username과 password 입력
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: 로그인 성공
          schema:
            type: object
            properties:
              result:
                type: string
              userId:
                type: integer
              token:
                type: string
              refreshToken:
                type: string
  /api/accounts/user-edit:
    put:
      tags:
        - accounts
      summary: (토큰 필요) 회원정보 수정 API
      description: img, introduce는 null값 허용입니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                birthday:
                  type: string
                img:
                  type: string
                introduce:
                  type: string
              required:
                - nickname
                - birthday
      responses:
        "200":
          description: 회원정보 수정 성공
          schema:
            type: object
            properties:
              result:
                type: string
  /api/accounts/password-confirm:
    post:
      tags:
        - accounts
      summary: (토큰 필요) 비밀번호 확인 API
      description: password를 입력하세요.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        "200":
          description: 비밀번호 확인 성공
          schema:
            type: object
            properties:
              result:
                type: string
              userId:
                type: integer
  /api/accounts/password-edit:
    put:
      tags:
        - accounts
      summary: 비밀번호만 변경 API
      description: userId(pk)와 password를 입력하세요.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                password:
                  type: string
              required:
                - userId
                - password
      responses:
        "200":
          description: 비밀번호 변경 성공
          schema:
            type: object
            properties:
              result:
                type: string
  /api/accounts/password-question-edit:
    put:
      tags:
        - accounts
      summary: (토큰 필요) 비밀번호 + 질문 답변 변경 API
      description: question은 인덱스값을 넣어야 합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                question:
                  type: integer
                answer:
                  type: string
              required:
                - password
                - question
                - answer
      responses:
        "200":
          description: 비밀번호 + 질문 답변 변경 성공
          schema:
            type: object
            properties:
              result:
                type: string
  /api/accounts/question-answer-confirm:
    post:
      tags:
        - accounts
      summary: 질문과 답변 확인 API
      description: question은 인덱스값을 넣어야 합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                question:
                  type: integer
                answer:
                  type: string
              required:
                - username
                - question
                - answer
      responses:
        "200":
          description: 질문과 답변 확인 성공
          schema:
            type: object
            properties:
              result:
                type: string
              userId:
                type: integer
  /api/accounts/username-confirm:
    post:
      tags:
        - accounts
      summary: 아이디 중복체크 API
      description: username 입력
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
              required:
                - username
      responses:
        "200":
          description: 아이디 중복체크 확인 성공
          schema:
            type: object
            properties:
              result:
                type: string
  /api/accounts/user-info:
    get:
      tags:
        - accounts
      summary: (토큰 필요) 유저정보 API
      responses:
        "200":
          description: 유저정보 가져오기 성공
          schema:
            type: object
            properties:
              user:
                type: object
  /api/accounts/token:
    post:
      tags:
        - accounts
      summary: 리프레시토큰 유효 체크 API
      description: refreshToken과 userId 입력
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                userId:
                  type: integer
              required:
                - refreshToken
                - userId
      responses:
        "200":
          description: 유효체크 성공
          schema:
            type: object
            properties:
              token:
                type: string
  /api/pasts/:
    get:
      tags:
        - pasts
      summary: (토큰 필요) 과거 자서전 정보 API
      description: 표지정보, 챕터내용, 목차 정보
      responses:
        "200":
          description: 과거 자서전 정보
          schema:
            type: object
            properties:
              cover:
                type: object
              content:
                type: array
              list:
                type: object
    put:
      tags:
        - pasts
      summary: (토큰 필요) 과거 자서전 수정 API
      description: cover 정보 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: "string"
                size:
                  type: "integer"
                skin:
                  type: "integer"
                font:
                  type: "integer"
                skin_color:
                  type: "string"
                font_color:
                  type: "string"
      responses:
        "201":
          description: 표지 정보 수정 완료
          schema:
            type: object
            properties:
              success:
                type: "string"
    post:
      tags:
        - pasts
      summary: (토큰 필요) 과거 자서전 챕터 작성 API
      description: 자동저장시 check를 false, 확정저장시 check를 true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: "string"
                content:
                  type: "string"
                year:
                  type: "integer"
                check:
                  type: "boolean"
              required:
                - check
      responses:
        "201":
          description: 글 작성완료, 해당 글의 id 값 반환
          schema:
            type: object
            properties:
              id:
                type: "integer"
  /api/pasts/{chapter_id}:
    get:
      tags:
        - pasts
      summary: (토큰 필요) 과거 자서전 챕터 정보 API
      description: 해당 챕터 정보
      parameters:
        - in: path
          name: chapter_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: 챕터 id
      responses:
        "200":
          description: 과거 자서전 정보
          schema:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
              year:
                type: integer
              order:
                type: integer
              page:
                type: integer
              check:
                type: boolean
              createdAt:
                type: date
    put:
      tags:
        - pasts
      summary: (토큰 필요) 과거 자서전 챕터 수정 API
      description:
      parameters:
        - in: path
          name: chapter_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: 챕터 id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: "string"
                content:
                  type: "string"
                year:
                  type: "integer"
                check:
                  type: "boolean"
              required:
                - check
      responses:
        "201":
          description: 글 확정저장 완료
          schema:
            type: object
            properties:
              success:
                type: "string"
        "203":
          description: 글 자동저장 완료
          schema:
            type: object
            properties:
              success:
                type: "string"
    delete:
      tags:
        - pasts
      summary: (토큰 필요) 과거 자서전 챕터 삭제 API
      description:
      parameters:
        - in: path
          name: chapter_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: 챕터 id
      responses:
        "200":
          description: 글 삭제 완료
          schema:
            type: object
            properties:
              success:
                type: "string"
  /api/futures/:
    get:
      tags:
        - futures
      summary: (토큰 필요) 미래 자서전 정보 API
      description: 표지정보, 챕터내용, 목차 정보
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              cover:
                type: object
              content:
                type: array
              list:
                type: object
    put:
      tags:
        - futures
      summary: (토큰 필요) 미래 자서전 수정 API
      description: cover 정보 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: "string"
                size:
                  type: "integer"
                skin:
                  type: "integer"
                font:
                  type: "integer"
                skin_color:
                  type: "string"
                font_color:
                  type: "string"
      responses:
        "201":
          description: Created
          schema:
            type: object
            properties:
              success:
                type: "string"
        "400":
          description: Bad Request
    post:
      tags:
        - futures
      summary: (토큰 필요) 미래 자서전 챕터 작성 API
      description: 자동저장시 check를 false, 확정저장시 check를 true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: "string"
                content:
                  type: "string"
                year:
                  type: "integer"
                month:
                  type: "integer"
                day:
                  type: "integer"
                check:
                  type: "boolean"
              required:
                - check
      responses:
        "201":
          description: Created
          schema:
            type: object
            properties:
              id:
                type: "integer"
  /api/futures/{chapter_id}:
    get:
      tags:
        - futures
      summary: (토큰 필요) 미래 자서전 챕터 정보 API
      description: 해당 챕터 정보
      parameters:
        - in: path
          name: chapter_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: 챕터 id
      responses:
        "200":
          description: Created
          schema:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
              year:
                type: integer
              month:
                type: integer
              day:
                type: integer
              order:
                type: integer
              page:
                type: integer
              check:
                type: boolean
              createdAt:
                type: date
    put:
      tags:
        - futures
      summary: (토큰 필요) 미래 자서전 챕터 수정 API
      description:
      parameters:
        - in: path
          name: chapter_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: 챕터 id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: "string"
                content:
                  type: "string"
                year:
                  type: "integer"
                month:
                  type: "integer"
                day:
                  type: "integer"
                check:
                  type: "boolean"
              required:
                - check
      responses:
        "201":
          description: Created
          schema:
            type: object
            properties:
              success:
                type: "string"
        "202":
          description: Accepted
          schema:
            type: object
            properties:
              success:
                type: "string"
    delete:
      tags:
        - futures
      summary: (토큰 필요) 미래 자서전 챕터 삭제 API
      description:
      parameters:
        - in: path
          name: chapter_id
          required: true
          schema:
            type: integer
            minimum: 1
          description: 챕터 id
      responses:
        "200":
          description: 글 삭제 완료
          schema:
            type: object
            properties:
              success:
                type: "string"
  /api/timelines/:
    get:
      tags:
        - timelines
      summary: (토큰 필요) 인생 연표 정보 조회
      description: 연도별, 각 챕터를 order에 따라 id 값과 title을 정렬하여 반환
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              idxOrder:
                type: integer
                properties:
                  title:
                    type: string
                  id:
                    type: integer
                  order:
                    type: integer
                  check:
                    type: boolean
                  idx:
                    type: integer
    put:
      tags:
        - timelines
      summary: (토큰 필요) 인생 연표 정보 수정
      description: 수정이 필요한 연도와 순서 입력하여 연표의 순서를 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                year:
                  type: "array"
                  items:
                    type: "object"
                    properties:
                      id:
                        type: "integer"
                      order:
                        type: "integer"
              required:
                - year
                - id
                - order

      responses:
        "201":
          description: Created
          schema:
            type: object
            properties:
              success:
                type: "string"
  /api/questions/{id}:
    get:
      tags:
        - questions
      summary: (토큰 필요) 인생 질문 조회
      description: 90여개의 질문 중 가장 최근에 받은 질문을 제외한 질문 중 랜덤하게 뽑아서 제공
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: 질문 id
      responses:
        "200":
          description: 과거 자서전 정보
          schema:
            type: object
            properties:
              id:
                type: integer
              question:
                type: string
